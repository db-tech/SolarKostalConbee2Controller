package main

import (
	"errors"
	"fmt"
	"github.com/geschke/golrackpi"
	"math/rand"
)

type InverterData struct {
	//Hausverbrauch
	HousePowerConsumption float64 `json:"HousePowerConsumption"`

	// Power generated by the PV System
	// PV-Leistung
	PVPower float64 `json:"PVPower"`

	// Power taken from or given to the grid
	// if > 0: Power given to the grid
	// if < 0: Power taken from the grid
	// Netzbezug
	Overproduction float64 `json:"Overproduction"`
}

type Inverter interface {
	GetInverterData() (InverterData, error)
	Connect() error
	IsConnected() bool
}

func GetProcessData(pv *golrackpi.AuthClient, moduleId string, processDataId string) (float64, error) {
	values, err := pv.ProcessDataModuleValues(moduleId, processDataId)
	if err != nil {
		return 0, err
	}
	for _, value := range values {
		for _, pd := range value.ProcessData {
			fmt.Printf("%v: %v\n", pd.Id, pd.Value)
			return pd.Value.(float64), nil
		}
	}
	return 0, errors.New("no value found")
}

type KostalClient struct {
	Address    string
	Scheme     string
	Password   string
	AuthClient *golrackpi.AuthClient
}

func NewKostalClient(address string, password string) *KostalClient {
	return &KostalClient{
		Address:  address,
		Scheme:   "http",
		Password: password,
	}
}

func (k *KostalClient) GetInverterData() (InverterData, error) {
	if k.AuthClient == nil || !k.IsConnected() {
		return InverterData{}, errors.New("KostalClient not connected")
	}
	inverterData := InverterData{}

	var err error
	inverterData.HousePowerConsumption, err = GetProcessData(k.AuthClient, "devices:local", "Home_P")
	if err != nil {
		return inverterData, err
	}
	inverterData.PVPower, err = GetProcessData(k.AuthClient, "devices:local:ac", "P")
	if err != nil {
		return inverterData, err
	}
	inverterData.Overproduction = inverterData.PVPower - inverterData.HousePowerConsumption
	return inverterData, nil
}

func (k *KostalClient) Connect() error {
	auth := golrackpi.AuthClient{
		Scheme:   "http",
		Server:   k.Address,
		Password: k.Password,
	}
	k.AuthClient = golrackpi.NewWithParameter(auth)
	_, err := k.AuthClient.Login()
	if err != nil {
		k.AuthClient = nil
		return err
	}

	return nil
}

func (k *KostalClient) IsConnected() bool {
	return k.AuthClient != nil
}

type KostalTestClient struct {
	KostalClient
	connected bool
}

func NewInverterClient(address string, password string, clientType string) Inverter {
	if password == "test" {
		return NewKostalTestClient(address, password)
	} else {
		return NewKostalClient(address, password)
	}
}

func NewKostalTestClient(address string, password string) *KostalTestClient {
	kostal := &KostalTestClient{
		KostalClient: KostalClient{
			Address:  address,
			Scheme:   "http",
			Password: password,
		},
	}
	if password == "test" {
		kostal.connected = true
	} else {
		kostal.connected = false
	}
	return kostal
}

func (k *KostalTestClient) GetInverterData() (InverterData, error) {
	randomHousePowerConsumption := rand.Float64() * 1000
	randomPVPower := rand.Float64() * 1000
	randomGridConsumption := randomHousePowerConsumption - randomPVPower

	return InverterData{
		HousePowerConsumption: randomHousePowerConsumption,
		PVPower:               randomPVPower,
		Overproduction:        randomGridConsumption,
	}, nil
}

func (k *KostalTestClient) Connect() error {
	if k.Password == "test" {
		k.connected = true
	} else {
		k.connected = false
	}
	return nil
}

func (k *KostalTestClient) IsConnected() bool {
	return k.connected
}
